# Основы тестирования с unittest

"""Рассмотрим более мощный по функциональности инструмент тестирования из
коробки. Модуль unittest входит в стандартную библиотеку Python и не требует
дополнительной установки. Более того, unittest называют фреймворком, а не просто
модулем"""

# Общие моменты работы с unittest

import unittest


class TestCaseName(unittest.TestCase):
    def test_method(self):
        self.assertEqual(2 * 2, 5, msg="Видимо и в этой вселенной не работает :-(")


if __name__ == "__main__":
    unittest.main()

# AssertionError: 4 != 5 : Видимо и в этой вселенной не работает :-(

"""Для хранения тестов рекомендуется создавать отдельный файл с тестами или папку
tests, если файлов с тестами будет много. Смешивать в одном файле исполняемый
код и тесты не рекомендуется.
В файле с тестом импортируем модуль unittest и создаём класс для тестирования -
test case. Такой класс должен наследоваться от TestCase.
Внутри класса создаём методы, имена которых должны начинаться со слова test.
Таких методов внутри класса может быть несколько.
По наследованию от класса TestCase и именам методов unittest понимает, что перед
ним тесты, которые необходимо запустить.

Для проверки используем утверждения - “ассерты”. В приведённом примере
assertEqual принимает два аргумента: 2 * 2 и 5. Тест утверждает, что они равны. А
если значения не равны, будет поднято исключение AssertionError с текстом,
который передали в ключевом параметре msg.
"""

"""Внимание! Реальные тесты не должны содержать неверные утверждения, подобные “дважды два равно пяти”"""

"""Для запуска тестов вызываем функцию main(). Она проанализирует файл, соберёт тестовые кейсы, 
запустит и сообщит результаты проверки"""

"""Внимание! Команда для запуска тестов из командной строки выглядит аналогично запуску doctest"""

""" 
$ python3 -m unittest tests.py -v
"""

# Применение тестов Unittest

"""Файл prime.py без тестов doctest"""


def is_prime(p: int) -> bool:
    if not isinstance(p, int):
        raise TypeError("The number P must be an integer type")
    elif p < 2:
        raise ValueError("The number P must be greater than one")
    elif p > 100_000_000:
        print("If the number P is prime, the check may take a long time. Working...")
    for i in range(2, p):
        if p % i == 0:
            return False
    return True
