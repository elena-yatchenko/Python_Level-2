# ИТЕРАТОРЫ

"""Коллекции в Питон поддерживают интерфейс итерации, т.е. позволяют ПЕРЕБИРАТЬ свои ЭЛЕМЕНТЫ

1) 
функция ITER(object[, sentinel]) - принимает на вход object, поддерживающий итерацию. 
Второй параметр функции - sentinel передают для вызываемых объектов-итераторов (например, функций), 
показывая, когда будет стоп.
Функция iter() создает объект-итератор для передаваемой последовательности
"""
# iter()

# a = 42
# iter(a) # TypeError: 'int' object is not iterable

# data = [2, 4, 6, 8]
# list_iter = iter(data)
# print(list_iter) # <list_iterator object at 0x000001F37E4DEAD0>

# data = [2, 4, 6, 8]
# list_iter = iter(data)
# print(*list_iter) # 2 4 6 8
# print(*list_iter) 
"""объект-итератор позволяет пройти по последовательности всего 1 раз. При повторном 
прохождении ничего не происходит. Если нужно перебирать элементы последовтаельности несколько
раз, то для каждого перебора нужно заново вызывать функцию iter() для получения нового итератора"""

"""для словарей несколько видов итераторов есть: отдельно итератор для items, keys, values"""

""""""
# data = [2, 4, 6, 8]
# list_iter = iter(data, 6) # TypeError: iter(v, w): v must be callable
# ошибка, т.к. список не является функцией и ее нельзя вызывать

# import functools

# f = open('mydata.bin', 'rb')
# for block in iter(functools.partial(f.read, 16), b''):
#     print(block)
# f.close()

"""
Открыли файл для чтения бинарной информации. Для каждого блока в фукнции iter(), которая 
в качестве первого аргумента (объекта) получает функцию partial(), причем используем чтение файла блоками
по 16 байт. Второй аргумент (sentinel) - b'' - пустая бинарная строка. Функция partial()
читает последовательность файла блоками по 16 байт и функция iter() итерируется, получая эти блоки и 
заканчивает процесс итерации, когда доходит до пустой бинарной строки
"""

"""
2) 
- функция NEXT(iterator[,default]) - на вход функция принимает итератор, который вернула фукнция
iter() и при каждом вызове функции next() мы получаем очередной элемент из нашего объекта-итератора.
Второй параметр функции next() - default - нужен для возврата значения по умолчанию 
вместо выброса исключения StopIteration, т.е когда дойдем до конца итерируемого объекта 
"""

# data = [2, 4, 6, 8]
# list_iter = iter(data)
# print(next(list_iter)) # 2
# print(next(list_iter)) # 4
# print(next(list_iter)) # 6
# print(next(list_iter)) # 8
# print(next(list_iter)) # StopIteration (самоисключение, благодаря которому завершается цикл for in)

# print(next(list_iter, 42)) # 2
# print(next(list_iter, 42)) # 4
# print(next(list_iter, 42)) # 6
# print(next(list_iter, 42)) # 8
# print(next(list_iter, 42)) # 42
# print(next(list_iter, 42)) # 42

"""пока есть последовательность, возвращаются элементы последовательности. 
Когда последовательность заканчивается, возвращается значение, заданное по умолчанию"""

# TEST

data = {'oдин': 1, 'два': 2, 'три': 3}
x = iter(data.items()) 
print(x) # <dict_itemiterator object at 0x00000208D6695CB0>
y = next(x)
print(y) # ('oдин', 1)
z = next(iter(y))
print(z) # oдин






