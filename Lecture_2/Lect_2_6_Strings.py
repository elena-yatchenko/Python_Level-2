# СТРОКИ И СПОСОБЫ ИЗ ЗАПИСИ
# (строка является коллецией)
# str(object= '') # возвращает строковую версию объекта

# Кавычки: '', "". 
# 3 двойные кавычки в начале и в конце строки используются, чтобы можно было переносить строку, Т.е в переменную можно задать несколько строк кода.
# Также применяют, чтобы создать многострочный комментарий и т.п. 
# txt = 'Книга называется "Война и мир".'
# print(txt) # Книга называется "Война и мир".

""" комментарий к тексту может легко переноситься
на несколько строк, если использовать 3 двойные кавычки до и после"""

# ОБРАТНЫЙ СЛЭШ '\'

# text = 'Очень длинную строку или даже код,чтобы удобно было читать в поле работы' \
#         ' интерпретатора, можно разделять с помощью обратного слэша. В итоге' \
#         'при выводе этот слэщ не читается, а выводится сплошная строка или работает код'
# print(text)

# Очень длинную строку или даже код,чтобы удобно было читать в поле работы интерпретатора, можно разделять с помощью обратного слэша. В итогепри выводе этот слэщ не читается, а выводится сплошная строка или работает код

# КОНКАТИНАЦИЯ СТРОК
# при конкатинации все объекты должны быть строкой
# НО: конкатинация приводит к созданию новых объектов (чем больше +, тем больше новых объектов), поэтому
# лучше не злоупотреблять ей, а использовать спец.форматы для строк (f-строка или format)


# LIMIT = 120
# ATTENTION = 'Внимание!'
# name = input('your name? ')
# age = int(input('your age? '))
# text = ATTENTION + ' Хоть тебе и осталось ' + str(100 - age) +\
#     ' до ста лет, но длина строки не должна превышать ' + str(LIMIT) + ' символов.'
# print(text)

# Внимание! Хоть тебе и осталось 63 до ста лет, но длина строки не должна превышать 120 символов.

# РАЗМЕР СТРОКИ В ПАМЯТИ
"""Размер строки в памяти: 48 байт служебной информации для х64 Python и далее 1, 2 или 4 байта
на каждый символ в зависимости от кодировки. Обычно используется кодировка utf-8, где есть различые
смайлы, иероглифы и т.п."""

# object.__sizeof__() - метод возвращает размер объкта в байтах 

# empty_str = ''
# en_str = 'text'
# ru_str = 'текст'
# print(empty_str.__sizeof__()) # 49 - 48 байт служебной + 1 байт на символ переноса строки
# print(en_str.__sizeof__()) # 53 - 48 байт служебной + 4 буквы + 1 байт на перенос
# print(ru_str.__sizeof__()) # 84 - русский текст весит больше. Еще больше памяти берут смайлики

