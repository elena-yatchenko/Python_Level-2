
# МНОЖЕСТВА SET и FROZENSET (неизменяемые множества)

"""
Множество - коллекция, которая содержит уникальные значения (т.е. не повторяются)
В пайтон это значения хэшированного (неизменяемого) типа: числа (целые или вещественные), строки, 
кортежи, само множество как элемент другого множества

Изменяемое множество: set() или {1, 2, 3}
Неизменяемое множество: frozenset()
"""

# my_set = {1, 2, 3, 4, 2, 5, 6, 7}
# print(my_set)
# # {1, 2, 3, 4, 5, 6, 7}
# # !!! 2 вывелась только 1 раз, т.к. элементы множества не дублируются

# my_f_set = frozenset((1, 2, 3, 4, 2, 5, 6, 7))
# print(my_f_set)
# # frozenset({1, 2, 3, 4, 5, 6, 7})

# not_set = {1, 2, 3, 4, 2, 5, 6, 7, ['a', 'b']} # TypeError: unhashable type: 'list'

# РАБОТА С МНОЖЕСТВАМИ

"""
* ADD() - добавляет элемент 
* REMOVE() - удаляет элемент
* DISCARD() - удаляет элемент
* INTERSECTION() - пересечение множеств, &
* UNION() - объединение множеств, |
* DIFFERENCE() - разность множеств, -

"""

# ADD()

# my_set = {3, 4, 2, 5, 6, 1, 7}
# my_set.add(9)
# print(my_set) # {1, 2, 3, 4, 5, 6, 7, 9}
# my_set.add(7)
# print(my_set) # {1, 2, 3, 4, 5, 6, 7, 9} - ничего не изменилось, 7 уже есть
# # my_set.add(9, 10) # TypeError: set.add() takes exactly one argument (2 given)
# """множество может добавлять элементы по 1"""
# my_set.add((9, 10)) # видит как 1 элемент - кортеж, а не 2 разных
# print(my_set) # {(9, 10), 1, 2, 3, 4, 5, 6, 7, 9}

# REMOVE() - удаляет элемент по ЗНАЧЕНИЮ

# my_set = {3, 4, 2, 5, 6, 1, 7}
# my_set.remove(5)
# print(my_set) # {1, 2, 3, 4, 6, 7}
# my_set.remove(10) # KeyError: 10 - не может удалить несуществующий элемент

# DISCARD()

# my_set = {3, 4, 2, 5, 6, 1, 7}
# my_set.discard(5)
# print(my_set) # {1, 2, 3, 4, 6, 7}
# my_set.discard(10) # не выдает ошибку, просто игнорирует операцию, если нет такого элемента


# INTERSECTION() - ищем элементы, которые есть и в 1-м, и во 2-м множестве и формируем из них новое множество

# my_set = {3, 4, 2, 5, 6, 1, 7}
# other_set = {1, 4, 42, 314}
# new_set = my_set.intersection(other_set)
# print(f'{my_set = }\n{other_set = }\n{new_set = }')

# # my_set = {1, 2, 3, 4, 5, 6, 7}
# # other_set = {1, 42, 4, 314}
# # new_set = {1, 4}

# my_set = {3, 4, 2, 5, 6, 1, 7}
# other_set = {1, 4, 42, 314}
# new_set = my_set & other_set
# print(f'{my_set = }\n{other_set = }\n{new_set = }')

# # my_set = {1, 2, 3, 4, 5, 6, 7}
# # other_set = {1, 42, 4, 314}
# # new_set = {1, 4}

# UNION() - получаем новое множество, содержащее в себе элементы 1-го и 2-го множества, НЕ дублируя их

# my_set = {3, 4, 2, 5, 6, 1, 7}
# other_set = {1, 4, 42, 314}
# new_set = my_set.union(other_set)
# print(f'{my_set = }\n{other_set = }\n{new_set = }')

# # my_set = {1, 2, 3, 4, 5, 6, 7}
# # other_set = {1, 42, 4, 314}
# # new_set = {1, 2, 3, 4, 5, 6, 7, 42, 314}

# new_set = my_set | other_set
# print(f'{my_set = }\n{other_set = }\n{new_set = }')

# # my_set = {1, 2, 3, 4, 5, 6, 7}
# # other_set = {1, 42, 4, 314}
# # new_set = {1, 2, 3, 4, 5, 6, 7, 42, 314}

# DIFFERENCE() - вычитание из 1-го множества значений 2-го множества (указанного как аргумент метода)
"""
т.е. удаляем те элементы 1-го множества, которые имеют пару во 2-м множестве и 
выводим в итоговое множество оставшиеся элементы. 
!!! При этом, те элементы, которые есть во втором множестве и не имеют пары в 1-м мы не учитываем. 
Для этого мы должны были бы от 2-го множества отнимать 1-е.
"""
# my_set = {3, 4, 2, 5, 6, 1, 7}
# other_set = {1, 4, 42, 314}
# new_set = my_set.difference(other_set)
# print(f'{my_set = }\n{other_set = }\n{new_set = }')

# # my_set = {1, 2, 3, 4, 5, 6, 7}
# # other_set = {1, 42, 4, 314}
# # new_set = {2, 3, 5, 6, 7}

# new_set = my_set - other_set
# print(f'{my_set = }\n{other_set = }\n{new_set = }')

# # my_set = {1, 2, 3, 4, 5, 6, 7}
# # other_set = {1, 42, 4, 314}
# # new_set = {2, 3, 5, 6, 7}


# ТЕСТ

# my_set = frozenset({3, 4, 1, 2, 5, 6, 1, 7, 2, 7})

# print(len(my_set)) # 7
# print(my_set - {1, 2, 3}) # frozenset({4, 5, 6, 7})
# print(my_set.union({2, 4, 6, 8})) # frozenset({1, 2, 3, 4, 5, 6, 7, 8})
# print(my_set & {2, 4, 6, 8}) # frozenset({2, 4, 6})
# print(my_set.discard(10)) # AttributeError: 'frozenset' object has no attribute 'discard'

# для неизменяемого множества не работают методы удаления/добавления элементов

