"""
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å).
üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã.
"""

import json


class LevelError(Exception):
    pass


class AccessError(Exception):
    pass


class User:
    def __init__(self, name, _id, level):
        self.name = name
        self._id = _id
        self.level = level

    def __str__(self):
        return (
            f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.name}, —É—Ä–æ–≤–µ–Ω—å = {self.level}, id = {self._id}"
        )

    def to_dict(self):
        return {"name": self.name, "id": self._id, "level": self.level}

    def __eq__(self, other: object) -> bool:
        return self.name == other.name and self._id == other._id


class Project:
    file_name = "new_json.json"

    def __init__(self):
        self.lst_users = self.read_json()

    def read_json(self):
        lst_users = []
        store_id = set()
        try:
            with open(self.file_name, "r", encoding="utf-8") as f:
                user_data = json.load(f)
                for user in user_data:
                    lst_users.append(User(user["name"], user["id"], user["level"]))
                    store_id.add(user["id"])
        except FileNotFoundError as e:
            print(e)
        return lst_users

    def auth_user(self):
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        _id = input("–í–≤–µ–¥–∏—Ç–µ id: ")
        level = None
        my_user = User(name, _id, level)
        for user in self.lst_users:
            if my_user == user:
                my_user.level = user.level
                return my_user
        raise AccessError(_id)

    def add_user(self, creator: User, creature: User):
        if int(creator.level) > int(creature.level):
            raise LevelError(creature.level)
        self.lst_users.append(creature)
        return self.lst_users

    def save_json(self):
        with open(self.file_name, "w", encoding="utf-8") as f:
            """–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
            res_users = [i.to_dict() for i in self.lst_users]
            """—Ç.–∫. i —Å–µ–π—á–∞—Å  - —ç—Ç–æ –æ–±—ä–µ–∫—Ç (—ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ User), —Ç–æ –º–æ–∂–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é 
            –∫ –º–µ—Ç–æ–¥—É –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
            json.dump(res_users, f, indent=2)


if __name__ == "__main__":
    project = Project()
    my_user = project.auth_user()

    while True:
        name = input("Name: ")
        if name == "help":
            break
        if not name:
            print("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            continue
        _id = input("id: ")
        level = input("level: ")
        if int(level) not in range(1, 8):
            print("–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 7")
            continue

        project.add_user(my_user, User(name, _id, level))

    project.save_json()
