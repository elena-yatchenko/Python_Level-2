puzzles = {
        'Зимой и летом одним цветом': ['ель', 'ёлка', 'сосна'],
        'Не лает, не кусает, в дом не пускает': ['замок'],
        'Сидит дед во сто шуб одет': ['лук', 'луковица'],
    }

# Добавьте в модуль с загадками функцию,
# которая хранит словарь списков. Ключ словаря - загадка,
# значение - список с отгадками. Функция в цикле вызывает
# загадывающую функцию, чтобы передать ей все свои загадки.

_result = {}

def func(s: str, lst: list[str], n: int=3):
    print(f'Угадай загадку:\n{s}')
    for i in range(1, n + 1):
        answer = input().lower()
        if answer in lst:
            print(f'Вы угадали с {i} попытки.')
            result_dict(s, i)
            return i
        else:
            print(f'Не угадали, осталось попыток {n - i}')
    print(f'Вы не угадали, попытки закончились.')
    result_dict(s, 0)
    return 0

# словарь с результатами отгадывания
def result_dict(text: str, num: int) -> dict:
    _result[text] = num

# объединили функцию с загадками и функцию с формированием словаря результатов
def fun_2(my_dict: dict) -> int:
    for key, value in my_dict.items():
        func(key, value)
    show_result()

# выводим результат
def show_result(): 
    answer = '\n'.join((f'Загадку "{key}" угадали с {value} попытки' if value != 0 
                        else f'Загадку {key} не угадали' for key, value in _result.items()))  
    print(answer)
    
    
if __name__ == '__main__':
    fun_2(puzzles)
    #print(_result)
    
# Добавьте в модуль с загадками функцию,
# которая принимает на вход строку (текст загадки)
# и число (номер попытки, с которой она угадана).
# Функция формирует словарь с информацией о результатах отгадывания.
# Для хранения используйте защищённый словарь уровня модуля.

# Отдельно напишите функцию, которая выводит результаты
# угадывания из защищённого словаря в удобном для чтения виде.
# Для формирования результатов используйте генераторное выражение.

