# ВИДЫ МОДУЛЕЙ

# ВСТРОЕННЫЕ МОДУЛИ

"""
* Стандартная библиотека устанавливается вместе с интерпретатором. Дополнительные манипуляции
по установке не требуются, все работает "из коробки"
* Для использования модуля из стандартной библиотеки достаточно импортировать его в ваш код. 
* Большинство частых задач легко решаются средствами стандартной библиотеки. 
Достаточно обратиться к справке и найти нужный модуль
* Некоторые модули стандартной библиотеки разрабатывались настолько давно, что 
не отвечают современным требованиям решения задач. В таком случае на помощь приходят
внешние решения. И наоборот. Каждое обновление Python вносит улучшения в библиотеку, 
зачастую более эффективные, чем внешние решения
"""

# СВОИ МОДУЛИ

"""
Модуль пишется просто в обычном файле с расширением .py

СПИСОК, что желательно должно входить в модуль:
* документация по модулю в виде многострочного комментария (три пары ")
* импорт необходимых пакетов, модулей, классов, функций и т.п. объектов
* определение констант уровня модуля
* создание классов модуля при ООП подходе
* создание функций модуля
* определение переменных уровня модуля
* покрытие тестами, если оно не вынесено в отдельный пакет
* main код
"""

# ПРИМЕР МОДУЛЯ (base_math)

""" Four basic mathematical operations/

Addition, subtraction, multiplication and division as functions.
"""
# подчеркивание к константам добавляем, чтобы они случайно куда-то не импортировались.

# _START_SUM = 0
# _START_MULT = 1
# _BEGINNING = 0
# _CONTINUATION = 1

# def add(*args):
#     res = _START_SUM
#     for item in args:
#         res += item
#     return res

# def sub(*args):
#     res = args[_BEGINNING]
#     for item in args[_CONTINUATION:]:
#         res -= item
#     return res

# def mul(*args):
#     res = _START_MULT
#     for item in args:
#         res *= item
#     return res

# def div(*args):
#     res = args[_BEGINNING]
#     for item in args[_CONTINUATION:]:
#         res /= item
#     return res   

# # тестирующие строки кода (проверка работы кода модуля)
# if __name__ == '__main__':
#     print(f'{add(2, 4) = }')
#     print(f'{add(2, 4, 6, 8) = }')
#     print(f'{sub(10, 2) = }')
#     print(f'{mul(2, 2, 2, 2, 2) = }')
#     print(f'{div(-100, 5, -2) = }')

# add(2, 4) = 6
# add(2, 4, 6, 8) = 20
# sub(10, 2) = 8
# mul(2, 2, 2, 2, 2) = 32
# div(-100, 5, -2) = 10.0

"""
!!! В данном модуле нет main кода. 
"""

""" 
import base_math - при импорте каждый раз будут запускаться наши проверочные print
с заданными там значениями. Чтобы этого не было, правильно сделать следующее:
до вывода тестирующих строк кода пишем следующее: 

if __name__ == '__main__':
    print(f'{add(2, 4) = }')
    print(f'{add(2, 4, 6, 8) = }')
    print(f'{sub(10, 2) = }')
    print(f'{mul(2, 2, 2, 2, 2) = }')
    print(f'{div(-100, 5, -2) = }')
    
При запуске файла самого модуля в переменной __name__ лежит имя __main__, 
поэтому тестовые строки срабатывают. 
При импорте модуля в его переменную __name__ автоматически помещается название 
этого модуля (в нашем случае base_math) и тестовые строки не запускается. 
"""

# ПРИМЕРЫ ПЛОХОГО ИМПОРТА

# import base_math

# x = base_math.mul # передача имени в другую переменную

# y = base_math._START_MULT # обращение к защищенной или приватной переменной

# СОЗДАНИЕ ПАКЕТОВ И ИХ ИМПОРТ

""" 
Чтобы модуль превратился в пакет, необходимо создать каталог (папку, директорию), 
переместить туда нужные модули и создать внутри этой папки файл с именем __init__.py
Директория с __init__.py превращается в пакет (одновременно воспринимается как модуль, 
т.е. можно импортировать в другие модули). 
!!! Каждый пакет является модулем, НО не каждый модуль является пакетом
"""

# Зачем пакеты. Создаем еще один модуль с другими фунцкиями математики

"""Two advanced mathematical options.

Integer division and exponentiation."""

# __all__ = ['div', 'exp']
# _BEGINNING = 0
# _CONTINUATION = 1

# def div(*args):
#     res = args[_BEGINNING]
#     for item in args[_CONTINUATION:]:
#         res //= item
#     return res 

# def exp(*args):
#     res = args[_BEGINNING]
#     for item in args[_CONTINUATION:]:
#         res **= item
#     return res 

# После помещаем оба свои модуля в 1 пакет. 
""" Новая директория - перемещение туда обоих файлов с модулями - добавление файла 
__init__.py (внутри этот файл остается пустым или можно прописать какой-то код к выполнению при вызове. или там 
прописывают переменную __all__)"""

"""
Разница между модулем и пакетом: 
* Пакет хранит модули (при этом сам являясь модулем тоже)
* Пакет - директория с __init__.py файлом
* Пакет можно импортировать как модуль
* Внутри файла __init__.py можно прописать код, который будет выполняться
при импорте пакета 
* в пакете могут быть вложенные пакеты
"""

# ВАРИАНТЫ ИМПОРТА ПАКЕТОВ 
# (!!! Относительный импорт запрещен в основном файле проекта)

"""
* ПРОСТОЙ ИМПОРТ
import mathematical
* АБСОЛЮТНЫЙ ИМПОРТ
from mathematical import base_math as bm
* ОТНОСИТЕЛЬНЫЙ ИМПОРТ
from . import other_module - импотируем другой модуль, лежащий в той же папке
from .. import other_module - импорт модуля из папки на одну выше
from .. other_package import other_module - поднимись на один уровень выше, перейди
в другой пакет и импортируй из другого пакета другой модуль

! Мы можем использовать относительный импорт во всех файлах, которые не запускаем. 
Т.е. если есть несколько файлов, которые нужны для тех или иных операций и основной
файл, который запускается и используется для взаимодействия с пользователем, то в
этом основном файле относительный импорт НЕ используем (все дело в переменной 
__name__, которой при запуске файла присваивается имя этого файла)
"""

# примеры импорта

# from mathematical import base_math
# from mathematical.advanced_math import exp # сразу импортировали нужную фукнцию
# from mathematical import base_math as bm

# x = base_math.div(10, 2)
# print(x) # 5.0

# z = exp(2, 3)
# print(z) # 8

# y = bm.div(12, 5) # 2.4

# TEST (хорошее или плохое имя для файла?)

# __all__.py - не оч.хорошо, т.к. есть такая готовая переменная, чтобы не путать
# __init__.py - нормально
# __main__.py - нормально, но будет выполнен код именно этого файла (вместе с тестовыми строками)
# init.py - нормально
# math.py - плохое, есть такой встроенный модуль
# random.py - плохое, есть такой уже встроенный модуль в питон
