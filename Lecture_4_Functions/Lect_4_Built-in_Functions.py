# –í–°–¢–†–û–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò

# MAP(), FILTER(), ZIP()
"""
map(function, iterable) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –§—É–Ω–∫—Ü–∏—è
–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç map –∏—Ç–µ—Ä–∞—Ç–æ—Ä

filter(function, iterable) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ï—Å–ª–∏
—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–ª–µ—å–Ω–æ—Å—Ç–∏. –ö–∞–∫ –∏ map, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
–æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä.

zip(*iterables, strict = False) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ 
–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ç.–µ. —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π,
–ø–æ—Ç–æ–º –≤—Å–µ –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∏ —Ç.–¥, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç strict=True, –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É Value error –≤ —Å–ª—É—á–∞–µ —Ä–∞–∑–Ω–æ–≥–æ 
—á–∏—Å–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π. –ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ç–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É 
—ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–∫–æ–ª—å–∫–æ –∏—Ö –≤ –Ω–∞–∏–º–µ–Ω—å—à–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.  
"""
# map()

# texts = ['–ü—Ä–∏–≤–µ—Ç', '–ó–î–û–†–û–í–ê', '–ø—Ä–∏–≤–µ–¢—Å—Ç–≤—É—é']
# res = map(lambda x: x.lower(), texts)
# print(*res) # –ø—Ä–∏–≤–µ—Ç –∑–¥–æ—Ä–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é
"""–ï—Å–ª–∏ –±—ã –Ω–µ –∑–≤–µ–∑–¥–æ—á–∫–∞ (*res), —Ç–æ –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∏–ª–∏ –±—ã map-–æ–±—ä–µ–∫—Ç, –Ω–µ —Å–ø–∏—Å–æ–∫
!!!!! * –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç"""

# filter()

# numbers = [42, -73, 1024]
# res = tuple(filter(lambda x: x > 0, numbers))
## –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≤–º–µ—Å—Ç–æ *: —Å—Ä–∞–∑—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç - tuple, list –∏ —Ç.–ø.
# print(res) # (42, 1024)

# zip()

# names = ['–ò–≤–∞–Ω', '–ù–∏–∫–æ–ª–∞–π', '–ü–µ—Ç—Ä']
# salaries = [125_000, 96_000, 109_000]
# awards = [0.1, 0.25, 0.13, .99]

# for name, salary, award in zip(names, salaries, awards):
#     print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f}–¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary * award:.2f}')

# –ò–≤–∞–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª 125000.00–¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é 12500.00
# –ù–∏–∫–æ–ª–∞–π –∑–∞—Ä–∞–±–æ—Ç–∞–ª 96000.00–¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é 24000.00
# –ü–µ—Ç—Ä –∑–∞—Ä–∞–±–æ—Ç–∞–ª 109000.00–¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é 14170.00 

# MAX(), MIN(), SUM()
""""
- max(iterable, *[key,default]) –∏–ª–∏ max(arg1, arg2, *args[, key])
–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö
—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—â–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –Ω–∏—Ö. 
- max(iterable, *[key,default]) –∏–ª–∏ max(arg1, arg2, *args[, key])
–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ max(), –Ω–æ –∏—â–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
- sum(iterable, /, start=0)
–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç start –∑–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç.–µ.
—Å—É–º–º–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º–µ start, –∞ –Ω–µ –æ—Ç –Ω—É–ª—è –∏–¥–µ—Ç).
"""

# max()

# lst_1 = []
# lst_2 = [42, 256, 73]
# lst_3 = [('–ò–≤–∞–Ω', 125_000), ('–ù–∏–∫–æ–ª–∞–π', 96_000), ('–ü–µ—Ç—Ä', 109_000)]
# print(max(lst_1, default='empty')) # empty
# print(max(*lst_2)) # 256
# print(max(lst_3, key=lambda x: x[1])) # ('–ò–≤–∞–Ω', 125000) - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º, –∫–∞–∫ –∑–∞–¥–∞–ª–∏ –≤ –∫–ª—é—á–µ

# min()

# lst_1 = []
# lst_2 = [42, 256, 73]
# lst_3 = [('–ò–≤–∞–Ω', 125_000), ('–ù–∏–∫–æ–ª–∞–π', 96_000), ('–ü–µ—Ç—Ä', 109_000)]
# print(min(lst_1, default='empty')) # empty
# print(min(*lst_2)) # 42
# print(min(lst_3, key=lambda x: x[1])) # ('–ù–∏–∫–æ–ª–∞–π', 96000)

# sum()

# lst_2 = [42, 256, 73]
# print(sum(lst_2)) # 371
# print(sum(lst_2, start=1024)) # 1395 (1024 + 371)

# —Ñ—É–Ω–∫—Ü–∏–∏ ALL(), ANY()

"""
–ù–∞ –≤–≤–æ–¥ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∫–∞–∫—É—é-–ª–∏–±–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- all(iterable) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
—è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π
- any(iterable) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
—è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π
"""

# all()

"""–ö–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–∞ –±—ã —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –±—ã –µ–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É"""

# def all_(iterable):
#     for element in iterable:
#         if not element:
#             return False
#     return True

# numbers = [42, -73, 1024]
# if all(map(lambda x: x > 0, numbers)):
#     print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
# else: 
#     print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')
    
# –í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

# any()

# def any(iterable):
#     for element in iterable:
#         if not element:
#             return True
#     return False


# numbers = [42, -73, 1024]
# if any(map(lambda x: x > 0, numbers)):
#     print('–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π')
# else: 
#     print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª—å—à–µ –Ω—É–ª—è')
    
# –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¢–ï–ö–°–¢–û–ú: CHR(), ORD()

"""
- CHR(integer) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Æ–Ω–∏–∫–æ–¥ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
–ù–æ–º–µ—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1_114_111
- ORD(char) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ –Æ–Ω–∏–∫–æ–¥
"""
# chr()

# print(chr(97)) # a
# print(chr(1105)) # —ë
# print(chr(128519)) # üòá

# ord()

# print(ord('a')) # 97, —Ä—É—Å—Å–∫–∞—è –∞ - 1072
# print(ord('—ë')) # 1105
# print(ord('üòá')) # 128519

# —Ñ—É–Ω–∫—É—Ü–∏–∏ LOCALS(), GLOBALS(), VARS() (–Ω–µ –ø—É—Ç–∞—Ç—å —Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)

"""
- locals() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–õ–û–í–ê–†–¨ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
–Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏. –ü—Ä–∏ —ç—Ç–æ–º, –≤–µ—Ä–Ω—É–≤—à–∏–π—Å—è —Å–ª–æ–≤–∞—Ä—å –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å,–º–æ–∂–Ω–æ 
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ.
- globals() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–õ–û–í–ê–†–¨ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, 
—Ç.–µ. –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –º–æ–¥—É–ª—è. –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è
–ø–æ –∫–ª—é—á—É –∫ —ç–ª–µ–º–µ–Ω—Ç—É(–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π) –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
- vars() - –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ  —Ñ—É–Ω–∫—Ü–∏–∏ locals()
–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ vars() –æ–±—ä–µ–∫—Ç, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç __dict__
–ê –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç —É –æ–±—ä–µ–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É Type Error
"""

# locals()

# SIZE = 10

# def func(a, b, c):
#     x = a + b
#     print(locals())
#     z = x + c
#     return z

# func(1, 2, 3) 
# # {'a': 1, 'b': 2, 'c': 3, 'x': 3}
"""–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é z –º—ã –Ω–µ –≤–∏–¥–∏–º, —Ç.–∫. –æ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ü–û–°–õ–ï –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
locals(), –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É SIZE –Ω–µ –≤–∏–¥–∏–º, —Ç.–∫. –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""

# globals()

# SIZE = 10

# def func(a, b, c):
#     x = a + b
#     print(globals())
#     z = x + c
#     return z

# print(globals())
# print(f'{func(1, 2, 3) = }')

# # –≤—ã—à–ª–∏ –¥–ª—è –æ–±–æ–∏—Ö –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ globals() –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# # func(1, 2, 3) = 6

# # –∏–∑–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å globals()
# x = 42
# glob_dict = globals()
# glob_dict['x'] = 73
# print(f'{x = }') # x = 73

# vars()

# print(vars(int))
"""–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å –º–µ–∂–¥—É vars() –∏ dir(). –ü–æ —Å—É—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ"""

# TEST
# data = [25, -42, 146, 73, -100, 12]
# print(list(map(str, data))) 
# # ['25', '-42', '146', '73', '-100', '12']
# print(max(data, key=lambda x: -x))
# -100
# print(*filter(lambda x: not x[0].startswith('__'), globals().items()))
# # ('data', [25, -42, 146, 73, -100, 12])
# not x[0].startswith('__') - –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ 
# –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å __ (—Ç.–µ. —É–±–∏—Ä–∞–µ–º –ø–æ —Ñ–∞–∫—Ç—É –≤—Å–µ –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥—ã)


