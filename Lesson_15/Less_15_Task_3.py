"""
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
    ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
    ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
    ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞), - –ø–æ–ª–µ–∑–Ω–æ, —Ç.–∫. –±—ã–≤–∞–µ—Ç –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
    ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

from datetime import datetime

import logging

logging.basicConfig(level=logging.INFO, filename="file.log", encoding="utf-8")
logger = logging.getLogger(__name__)


def dec_log(func):
    def wrapper(*args, **kwarqs):
        _datetime = datetime.now()
        data = dict()
        res = func(*args, **kwarqs)
        data[_datetime] = (args, res)
        logger.info(f"{func.__name__}:{data}")
        return res

    return wrapper


@dec_log
def zero_devide(num_1, num_2):
    try:
        result = num_1 / num_2
    except ZeroDivisionError as e:
        result = float("inf")
    return result


print(zero_devide(2, 4))
print(zero_devide(2, 0))
