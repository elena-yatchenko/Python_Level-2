"""
üìå –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è
–≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
"""

import logging

logging.basicConfig(level=logging.INFO, filename="file.log", encoding="utf-8")

logger = logging.getLogger(__name__)


def zero_devide(num_1, num_2):
    try:
        result = num_1 / num_2
    except ZeroDivisionError as e:
        logger.error(f"–ü–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É {e}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã {num_1} {num_2}")
        result = float("inf")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã {num_1} {num_2}. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–≤–µ–Ω {result}")
    return result


print(zero_devide(2, 4))
print(zero_devide(2, 0))
