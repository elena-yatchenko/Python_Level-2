"""
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
    –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging.
"""

"""–≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–ª–∏ –ø–∞—Ä—É –≤—Ö–æ–¥—è—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–∞—Ç—ã (–ª—É—á—à–µ –≤—Å–µ–≥–æ, –¢–æ—á–Ω–æ –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ)
!!!–¥–æ–ø–∏—Å–∞—Ç—å"""

from datetime import datetime

import logging

logging.basicConfig(level=logging.INFO, filename="file.log", encoding="utf-8")
logger = logging.getLogger(__name__)


def dec_log(func):
    def wrapper(*args, **kwarqs):
        _datetime = datetime.now()
        data = dict()
        res = func(*args, **kwarqs)
        """–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–µ —Ä–∞–±–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å, –∫–ª—é—á - —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏"""
        data[_datetime] = (args, res)
        """args –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ —Ñ–∞–π–ª log –∏ –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞ (args) –∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (*args)"""
        logger.info(data)
        return res

    return wrapper


@dec_log
def zero_devide(num_1, num_2):
    try:
        result = num_1 / num_2
    except ZeroDivisionError as e:
        result = float("inf")
    return result


print(zero_devide(2, 4))
print(zero_devide(2, 0))
